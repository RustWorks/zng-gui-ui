//! Aggregate events.

use super::{
    units::LayoutPoint,
    var::{IntoVar, OwnedVar},
};
use crate::core::app::*;
use crate::core::context::*;
use crate::core::event::*;
use crate::core::keyboard::*;
use crate::core::mouse::*;
use crate::core::render::*;
use crate::core::types::*;
use crate::core::window::WindowId;
use std::convert::{TryFrom, TryInto};
use std::fmt::{self, Display};
use std::num::NonZeroU32;

/// Specific information from the source of a [`ClickArgs`].
#[derive(Debug, Clone)]
pub enum ClickArgsSource {
    /// Click event was generated by the [mouse click event](MouseClickEvent).
    Mouse {
        /// Which mouse button generated the event.
        button: MouseButton,

        /// Position of the mouse in the coordinates of [`target`](ClickArgs::target).
        position: LayoutPoint,

        /// Hit-test result for the mouse point in the window, at the moment the click event
        /// was generated.
        hits: FrameHitInfo,
    },

    /// Click event was generated by the [key down event](KeyDownEvent) with the
    /// [`VirtualKeyCode::Return`](VirtualKeyCode::Return) key.
    Key {
        /// If the key-down event was generated by holding the key pressed.
        repeat: bool,
    },
}

event_args! {
    /// [`ClickEvent`] arguments.
    pub struct ClickArgs {
        /// Id of window that received the event.
        pub window_id: WindowId,

        /// Id of device that generated the event.
        ///
        /// Is `None` if the event was generated programmatically.
        pub device_id: Option<DeviceId>,

        /// Specific info from the source of this event.
        pub source: ClickArgsSource,

        /// Sequential click count . Number `1` is single click, `2` is double click, etc.
        ///
        /// This is always `1` for clicks initiated by the keyboard.
        pub click_count: NonZeroU32,

        // What modifier keys where pressed when this event happened.
        pub modifiers: ModifiersState,

        /// The mouse input top-most hit or the focused element at the time of the key input.
        pub target: WidgetPath,

        ..

        /// If the widget is in [`target`](Self::target).
        fn concerns_widget(&self, ctx: &mut WidgetContext) -> bool {
            self.target.contains(ctx.path.widget_id())
        }
    }

    /// [`ShortcutEvent`] arguments.
    pub struct ShortcutArgs {
        /// Id of window that received the event.
        pub window_id: WindowId,

        /// Id of device that generated the event.
        ///
        /// Is `None` if the event was generated programmatically.
        pub device_id: Option<DeviceId>,

        /// The shortcut.
        pub shortcut: Shortcut,

        /// The focused element at the time of the shortcut input.
        pub target: WidgetPath,

        ..

        // If the widget is in [`target`](Self::target).
        fn concerns_widget(&self, ctx: &mut WidgetContext) -> bool {
            self.target.contains(ctx.path.widget_id())
        }
    }
}

impl From<MouseClickArgs> for ClickArgs {
    #[inline]
    fn from(args: MouseClickArgs) -> Self {
        ClickArgs::new(
            args.timestamp,
            args.window_id,
            args.device_id,
            ClickArgsSource::Mouse {
                button: args.button,
                position: args.position,
                hits: args.hits,
            },
            args.click_count,
            args.modifiers,
            args.target,
        )
    }
}

impl TryFrom<KeyInputArgs> for ClickArgs {
    type Error = KeyInputArgs;

    /// Converts to click args if `[key_input_is_click](key_input_is_click)(&args)`, otherwise returns
    /// the key input args.
    #[inline]
    fn try_from(args: KeyInputArgs) -> Result<Self, Self::Error> {
        if key_input_is_click(&args) {
            Ok(ClickArgs::new(
                args.timestamp,
                args.window_id,
                args.device_id,
                ClickArgsSource::Key { repeat: args.repeat },
                NonZeroU32::new(1).unwrap(),
                args.modifiers,
                args.target,
            ))
        } else {
            Err(args)
        }
    }
}

/// If is a [`Return`](VirtualKeyCode::Return) key press and [`target`](KeyInputArgs::target) is some widget.
#[inline]
pub fn key_input_is_click(args: &KeyInputArgs) -> bool {
    args.key == Some(VirtualKeyCode::Return) && args.state == ElementState::Pressed
}

impl ClickArgs {
    //// If the event was generated by holding the return key key pressed.
    #[inline]
    pub fn is_repeat(&self) -> bool {
        match &self.source {
            ClickArgsSource::Key { repeat, .. } => *repeat,
            _ => false,
        }
    }

    /// If the event counts as a left click.
    #[inline]
    pub fn is_left(&self) -> bool {
        match &self.source {
            ClickArgsSource::Mouse { button, .. } => *button == MouseButton::Left,
            _ => true,
        }
    }

    /// If this event was generated by a mouse device.
    #[inline]
    pub fn is_from_mouse(&self) -> bool {
        matches!(&self.source, ClickArgsSource::Mouse { .. })
    }

    /// If this event was generated by a keyboard device.
    #[inline]
    pub fn is_from_keyboard(&self) -> bool {
        matches!(&self.source, ClickArgsSource::Key { .. })
    }
}

/// A keyboard combination.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct KeyGesture {
    pub key: GestureKey,
    pub modifiers: ModifiersState,
}
impl KeyGesture {
    #[inline]
    pub fn new(modifiers: ModifiersState, key: GestureKey) -> Self {
        KeyGesture { modifiers, key }
    }

    /// New key gesture without modifiers.
    #[inline]
    pub fn new_key(key: GestureKey) -> Self {
        KeyGesture {
            modifiers: ModifiersState::empty(),
            key,
        }
    }
}
impl Display for KeyGesture {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if self.modifiers.logo() {
            write!(f, "logo + ")?
        }
        if self.modifiers.ctrl() {
            write!(f, "ctrl + ")?
        }
        if self.modifiers.shift() {
            write!(f, "shift + ")?
        }
        if self.modifiers.alt() {
            write!(f, "alt + ")?
        }

        write!(f, "{}", self.key)
    }
}

/// A modifier key press and release without any other key press in between.
#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
pub enum ModifierGesture {
    Logo,
    Ctrl,
    Shift,
    Alt,
}
impl Display for ModifierGesture {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            ModifierGesture::Logo => write!(f, "logo"),
            ModifierGesture::Ctrl => write!(f, "ctrl"),
            ModifierGesture::Shift => write!(f, "shift"),
            ModifierGesture::Alt => write!(f, "alt"),
        }
    }
}
impl TryFrom<VirtualKeyCode> for ModifierGesture {
    type Error = VirtualKeyCode;
    fn try_from(value: VirtualKeyCode) -> Result<Self, Self::Error> {
        match value {
            VirtualKeyCode::LAlt | VirtualKeyCode::RAlt => Ok(ModifierGesture::Alt),
            VirtualKeyCode::LControl | VirtualKeyCode::RControl => Ok(ModifierGesture::Ctrl),
            VirtualKeyCode::LShift | VirtualKeyCode::RShift => Ok(ModifierGesture::Shift),
            VirtualKeyCode::LWin | VirtualKeyCode::RWin => Ok(ModifierGesture::Logo),
            key => Err(key),
        }
    }
}

/// A sequence of two keyboard combinations.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub struct KeyChord {
    /// The first key gesture.
    pub starter: KeyGesture,

    /// The second key gesture.
    pub complement: KeyGesture,
}
impl Display for KeyChord {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{} {}", self.starter, self.complement)
    }
}

/// Keyboard gesture or chord associated with a command.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Shortcut {
    Gesture(KeyGesture),
    Chord(KeyChord),
    Modifier(ModifierGesture),
}
impl Display for Shortcut {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            Shortcut::Gesture(g) => Display::fmt(g, f),
            Shortcut::Chord(c) => Display::fmt(c, f),
            Shortcut::Modifier(m) => Display::fmt(m, f),
        }
    }
}

impl KeyInputArgs {
    /// Key gesture this key press triggers.
    ///
    /// See also [`ShortcutArgs`].
    #[inline]
    pub fn gesture(&self) -> Option<KeyGesture> {
        if self.state == ElementState::Released {
            return None;
        }

        self.key.and_then(|k| k.try_into().ok()).map(|key| KeyGesture {
            key,
            modifiers: self.modifiers,
        })
    }

    /// Gets [`gesture`](Self::gesture) as a shortcut.
    ///
    /// See also [`ShortcutArgs`].
    #[inline]
    pub fn shortcut(&self) -> Option<Shortcut> {
        self.gesture().map(Shortcut::Gesture)
    }
}

impl From<KeyGesture> for Shortcut {
    #[inline]
    fn from(g: KeyGesture) -> Self {
        Shortcut::Gesture(g)
    }
}
impl From<KeyChord> for Shortcut {
    #[inline]
    fn from(c: KeyChord) -> Self {
        Shortcut::Chord(c)
    }
}
impl From<ModifierGesture> for Shortcut {
    #[inline]
    fn from(m: ModifierGesture) -> Self {
        Shortcut::Modifier(m)
    }
}
impl IntoVar<Shortcut> for KeyGesture {
    type Var = OwnedVar<Shortcut>;
    fn into_var(self) -> Self::Var {
        OwnedVar(self.into())
    }
}
impl IntoVar<Shortcut> for KeyChord {
    type Var = OwnedVar<Shortcut>;
    fn into_var(self) -> Self::Var {
        OwnedVar(self.into())
    }
}
impl IntoVar<Shortcut> for ModifierGesture {
    type Var = OwnedVar<Shortcut>;
    fn into_var(self) -> Self::Var {
        OwnedVar(self.into())
    }
}

pub use zero_ui_macros::shortcut;

event! {
    /// Aggregate click event.
    ///
    /// Can be a mouse click, a [return key](VirtualKeyCode::Return) press or a touch tap.
    pub ClickEvent: ClickArgs;

    /// [`ClickEvent`] when the [`click_count`](ClickArgs::click_count) is `1`.
    pub SingleClickEvent: ClickArgs;

    /// [`ClickEvent`] when the [`click_count`](ClickArgs::click_count) is `2`.
    pub DoubleClickEvent: ClickArgs;

    /// [`ClickEvent`] when the [`click_count`](ClickArgs::click_count) is `3`.
    pub TripleClickEvent: ClickArgs;

    /// Shortcut input event.
    ///
    /// Event happens every time a full [`Shortcut`] is completed.
    pub ShortcutEvent: ShortcutArgs;
}

/// Application extension that provides aggregate events.
///
/// Events this extension provides.
///
/// * [ClickEvent]
/// * [SingleClickEvent]
/// * [DoubleClickEvent]
/// * [TripleClickEvent]
/// * [ShortcutEvent]
pub struct GestureManager {
    key_input: EventListener<KeyInputArgs>,
    mouse_click: EventListener<MouseClickArgs>,

    click: EventEmitter<ClickArgs>,
    single_click: EventEmitter<ClickArgs>,
    double_click: EventEmitter<ClickArgs>,
    triple_click: EventEmitter<ClickArgs>,

    shortcut_input: EventEmitter<ShortcutArgs>,
    pressed_modifier: Option<ModifierGesture>,
}

impl Default for GestureManager {
    fn default() -> Self {
        GestureManager {
            key_input: KeyInputEvent::never(),
            mouse_click: MouseClickEvent::never(),

            click: ClickEvent::emitter(),
            single_click: SingleClickEvent::emitter(),
            double_click: DoubleClickEvent::emitter(),
            triple_click: TripleClickEvent::emitter(),

            shortcut_input: ShortcutEvent::emitter(),
            pressed_modifier: None,
        }
    }
}

impl AppExtension for GestureManager {
    fn init(&mut self, r: &mut AppInitContext) {
        self.key_input = r.events.listen::<KeyInputEvent>();
        self.mouse_click = r.events.listen::<MouseClickEvent>();

        r.events.register::<ClickEvent>(self.click.listener());
        r.events.register::<SingleClickEvent>(self.single_click.listener());
        r.events.register::<DoubleClickEvent>(self.double_click.listener());
        r.events.register::<TripleClickEvent>(self.triple_click.listener());

        r.events.register::<ShortcutEvent>(self.shortcut_input.listener());
    }

    fn on_window_event(&mut self, _: WindowId, event: &WindowEvent, _: &mut AppContext) {
        if let WindowEvent::Focused(false) = event {
            self.pressed_modifier = None;
        }
    }

    fn update(&mut self, update: UpdateRequest, ctx: &mut AppContext) {
        if update.update {
            let notify_single = self.single_click.has_listeners();
            let notify_double = self.double_click.has_listeners();
            let notify_triple = self.triple_click.has_listeners();

            for args in self.mouse_click.updates(ctx.events) {
                let args: ClickArgs = args.clone().into();

                match args.click_count.get() {
                    1 if notify_single => ctx.updates.push_notify(self.single_click.clone(), args.clone()),
                    2 if notify_double => ctx.updates.push_notify(self.double_click.clone(), args.clone()),
                    3 if notify_triple => ctx.updates.push_notify(self.triple_click.clone(), args.clone()),
                    _ => {}
                }

                ctx.updates.push_notify(self.click.clone(), args);
            }

            for args in self.key_input.updates(ctx.events) {
                if key_input_is_click(args) {
                    let args: ClickArgs = args.clone().try_into().unwrap();

                    if notify_single {
                        ctx.updates.push_notify(self.single_click.clone(), args.clone());
                    }

                    ctx.updates.push_notify(self.click.clone(), args);
                }

                if let Some(key) = args.key {
                    match args.state {
                        ElementState::Pressed => {
                            if let Ok(gesture_key) = GestureKey::try_from(key) {
                                ctx.updates.push_notify(
                                    self.shortcut_input.clone(),
                                    ShortcutArgs::now(
                                        args.window_id,
                                        args.device_id,
                                        Shortcut::Gesture(KeyGesture::new(args.modifiers, gesture_key)),
                                        args.target.clone(),
                                    ),
                                );
                                self.pressed_modifier = None;
                            } else if let Ok(mod_gesture) = ModifierGesture::try_from(key) {
                                self.pressed_modifier = Some(mod_gesture);
                            }
                        }
                        ElementState::Released => {
                            if let Ok(mod_gesture) = ModifierGesture::try_from(key) {
                                if Some(mod_gesture) == self.pressed_modifier.take() && args.modifiers.is_empty() {
                                    ctx.updates.push_notify(
                                        self.shortcut_input.clone(),
                                        ShortcutArgs::now(
                                            args.window_id,
                                            args.device_id,
                                            Shortcut::Modifier(mod_gesture),
                                            args.target.clone(),
                                        ),
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

impl std::str::FromStr for ModifierGesture {
    type Err = ParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s.trim() {
            "Ctrl" => Ok(ModifierGesture::Ctrl),
            "Shift" => Ok(ModifierGesture::Shift),
            "Alt" => Ok(ModifierGesture::Alt),
            "Logo" => Ok(ModifierGesture::Logo),
            s => Err(ParseError::new(format!("`{}` is not a modifier", s))),
        }
    }
}

impl std::str::FromStr for KeyGesture {
    type Err = ParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let mut modifiers = ModifiersState::empty();
        let mut parts = s.split('+');

        while let Some(part) = parts.next() {
            if let Ok(mod_) = part.parse::<ModifierGesture>() {
                match mod_ {
                    ModifierGesture::Logo => modifiers |= ModifiersState::LOGO,
                    ModifierGesture::Ctrl => modifiers |= ModifiersState::CTRL,
                    ModifierGesture::Shift => modifiers |= ModifiersState::SHIFT,
                    ModifierGesture::Alt => modifiers |= ModifiersState::ALT,
                }
            } else if let Ok(key) = part.parse::<GestureKey>() {
                if let Some(extra) = parts.next() {
                    return Err(ParseError::new(format!("`{}` is not a key gesture, unexpected `+{}`", s, extra)));
                }

                return Ok(KeyGesture { modifiers, key });
            } else {
                return Err(ParseError::new(format!("`{}` is not a key gesture, unexpected `{}`", s, part)));
            }
        }

        Err(ParseError::new(format!("`{}` is not a key gesture, missing key", s)))
    }
}

impl std::str::FromStr for KeyChord {
    type Err = ParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let mut parts = s.split(',');

        let starter = if let Some(starter) = parts.next() {
            starter.parse()?
        } else {
            return Err(ParseError::new("`` is not a key chord, empty"));
        };

        let complement = if let Some(complement) = parts.next() {
            complement.parse()?
        } else {
            return Err(ParseError::new(format!("`{}` is not a key chord, expected `, <complement>`", s)));
        };

        if let Some(extra) = parts.next() {
            return Err(ParseError::new(format!("`{}` is not a key chord, unexpected `,{}`", s, extra)));
        }

        Ok(KeyChord { starter, complement })
    }
}

impl std::str::FromStr for Shortcut {
    type Err = ParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        if s.contains(',') {
            s.parse().map(Shortcut::Chord)
        } else if s.contains('+') {
            s.parse().map(Shortcut::Gesture)
        } else {
            s.parse()
                .map(Shortcut::Modifier)
                .map_err(|_| ParseError::new(format!("`{}` is not a shortcut", s)))
        }
    }
}

macro_rules! gesture_key_name {
    ($key:ident = $name:expr) => {
        $name
    };
    ($key:ident) => {
        stringify!($key)
    };
}

macro_rules! gesture_keys {
    ($($key:ident $(= $name:expr)?),+) => {
        /// The set of keys that can be used in a [`KeyGesture`].
        #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
        pub enum GestureKey {
            $($key),+
        }
        impl TryFrom<VirtualKeyCode> for GestureKey {
            type Error = VirtualKeyCode;

            fn try_from(key: VirtualKeyCode) -> Result<Self, VirtualKeyCode> {
                match key {
                    $(VirtualKeyCode::$key => Ok(GestureKey::$key),)+
                    _ => Err(key)
                }
            }
        }
        impl Display for GestureKey {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    $(GestureKey::$key => gesture_key_name!($key $(=$name)?).fmt(f),)+
                }
            }
        }
        impl std::str::FromStr for GestureKey {
            type Err = ParseError;

            fn from_str(s: &str) -> Result<Self, Self::Err> {
                match s.trim() {
                    $(stringify!($key) $(| $name)? => Ok(Self::$key),)+
                    s => Err(ParseError::new(format!("`{}` is not a gesture key", s)))
                }
            }
        }
    };
}

gesture_keys! {
    Key1 = "1",
    Key2 = "2",
    Key3 = "3",
    Key4 = "4",
    Key5 = "5",
    Key6 = "6",
    Key7 = "7",
    Key8 = "8",
    Key9 = "9",
    Key0 = "0",
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Escape = "Esc",
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    Pause,
    Insert,
    Home,
    Delete,
    End,
    PageDown = "Page Down",
    PageUp = "Page Up",
    Left,
    Up,
    Right,
    Down,
    Back,
    Return,
    Space,
    Add = "+",
    Apostrophe = "'",
    Backslash = "\\",
    Comma = ",",
    Decimal = ".",
    Divide = "/",
    Equals = "=",
    Minus = "-",
    Multiply = "*",
    Numpad1 = "Numpad 1",
    Numpad2 = "Numpad 2",
    Numpad3 = "Numpad 3",
    Numpad4 = "Numpad 4",
    Numpad5 = "Numpad 5",
    Numpad6 = "Numpad 6",
    Numpad7 = "Numpad 7",
    Numpad8 = "Numpad 8",
    Numpad9 = "Numpad 9",
    Numpad0 = "Numpad 0",
    NumpadComma = "Numpad ,",
    Tab
}

/// Shortcut, gesture parsing error.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct ParseError {
    pub error: String,
}
impl ParseError {
    pub fn new(error: impl ToString) -> Self {
        ParseError { error: error.to_string() }
    }
}
impl fmt::Display for ParseError {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        self.error.fmt(f)
    }
}
impl std::error::Error for ParseError {}
