[package]
name = "zero-ui-core"
version = "0.1.0"
authors = ["Samuel Guerra <sam.rodr.g@gmail.com>", "Well <well-r@hotmail.com>"]
edition = "2021"
license = "Apache-2.0"

[features]
default = ["ipc"]

# Enables pre-build views and connecting to views running in another process.
# 
# Enabled by default.
ipc = ["zero-ui-view-api/ipc"]

# Use dynamic dispatch at the property level by placing each property node in a `BoxedUiNode`.
#
# This speeds-up compilation time at the cost of runtime, if `inspector` is enabled 
# the generated code has the same effect as this.
dyn_property = ["zero-ui-proc-macros/dyn_property"]

# Use dynamic dispatch at the widget level by placing the widget child node in a `BoxedUiNode`.
#
# This does not cost as much runtime as `dyn_property` and is the only way of getting sane build times
# in most desktop machines. Without this feature build time and memory grows exponentially or worst, a similar
# effect that can be observed in nested async code. Only enable this if you have build server that can handle it,
# the result is as optimized as it gets with some event handlers compiling down to an almost direct call.
dyn_widget = ["zero-ui-proc-macros/dyn_widget"]

# Instrument each property and widget instance with "Inspector" nodes.
#
# This is enabled by default in debug builds.
#
# Note: This has the effect of `dyn_widget` and `dyn_property`.
inspector = ["zero-ui-proc-macros/inspector"]

# Use dynamic dispatch at the app-extension level.
#
# This is enabled by default in debug builds.
#
# This speeds-up compilation time at the cost of runtime.
dyn_app_extension = []

# like cfg(test) but also visible in docs and integration tests.
#
# USAGE:
#
# For zero-ui-core maintainers, use `#[cfg(feature="test_util")]` in the helper types and places where
# the types are used. Use `do` to run integration tests.
#
# For external dependents, build with this feature to use the test helper types that show
# in the documentation.
test_util = []

# # Other Features
#
# ## `doc_nightly`
#
# Activates nightly only `rustdoc` features. The crate is already configured to use this feature
# in "docs.rs" and `do doc`.
# 
# Use `#![cfg_attr(doc_nightly, feature(doc_foo))]` in the `lib.rs` to activate a `rustdoc` feature. Then
# use `#[cfg_attr(doc_nightly, doc(foo))]` in an item.
# 
# Use `RUSTDOCFLAGS="--cfg doc_nightly" cargo +nightly doc` to run `cargo doc` without using `do`.

[dependencies]
# local
zero-ui-proc-macros = { path = "../zero-ui-proc-macros" }
zero-ui-view-api = { path = "../zero-ui-view-api", default-features = false }

# text
font-kit = "0.10"
unicode-script = "0.5"
unicase = "2"
harfbuzz_rs = "2"
xi-unicode = "0.3"

# task
flume = { version = "0.10", default-features  = false, features = ["async"] }
rayon = "1"
blocking = "1"
parking_lot = "0.11"
futures-timer = "3"
isahc = { version = "1", features = ["cookies", "json"] }
futures-lite = "1"
async-fs = "1.5"

# util
bitflags = "1"
paste = "1"
rustc-hash = "1"
colored = "2"
array-init = "2"
derive_more = "0.99"
ego-tree = "0.6"
retain_mut = "0.1"
once_cell = "1"
byteorder = "1"
tracing = "0.1"
unsafe-any = "0.4"
linear-map = "1"
rand = "0.8"
hashers = "1"
base64 = "0.13"
hashbrown = "0.11"

# serde
serde = "1"
serde_json = "1"

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-pc-windows-msvc", "x86_64-unknown-linux-gnu"]
rustdoc-args = ["--cfg", "doc_nightly"]