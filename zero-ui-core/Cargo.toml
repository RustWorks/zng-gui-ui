[package]
name = "zero-ui-core"
version = "0.1.0"
authors = ["Samuel Guerra <sam.rodr.g@gmail.com>", "Well <well-r@hotmail.com>"]
edition = "2021"
license = "Apache-2.0"

[features]
default = ["ipc", "http", "debug_default"]

# Enables pre-build views and connecting to views running in another process.
# 
# Enabled by default.
ipc = ["zero-ui-view-api/ipc"]

# Enables http tasks.
#
# Enabled by default.
http = ["isahc", "http-cache-semantics", "http-serde"]

# Signal the build script to enable the `dyn_*` and `inspector` features for debug builds.
#
# Enabled by default.
debug_default = []

# Use dynamic dispatch at the node level by placing each property node in a `BoxedUiNode` and enabling `UiNode::cfg_boxed`.
#
# This speeds-up compilation time at the cost of runtime.
dyn_node = []

# Use dynamic dispatch at the widget level by enabling `Widget::cfg_boxed_wgt` and boxing the child node of widget's new function.
#
# This does not cost as much runtime as `dyn_node` and is the only way of getting sane build times
# in most desktop machines. Without this feature build time and memory grows exponentially or worst, a similar
# effect that can be observed in nested async code. Only enable this if you have build server that can handle it,
# the result is as optimized as it gets with some event handlers compiling down to an almost direct call.
dyn_widget = []

# Instrument each property and widget instance with "Inspector" nodes.
inspector = []

# Use dynamic dispatch at the app-extension level.
#
# This speeds-up compilation time at the cost of runtime.
dyn_app_extension = []

# Box closures at opportune places, such as `Var::map`, reducing the number of monomorphised types.
#
# This speeds-up compilation time at the cost of runtime.
dyn_closure = []

# like cfg(test) but also visible in docs and integration tests.
#
# USAGE:
#
# For zero-ui-core maintainers, use `#[cfg(feature="test_util")]` in the helper types and places where
# the types are used. Use `do` to run integration tests.
#
# For external dependents, build with this feature to use the test helper types that show
# in the documentation.
test_util = []

# # Other Features
#
# ## `doc_nightly`
#
# Activates nightly only `rustdoc` features. The crate is already configured to use this feature
# in "docs.rs" and `do doc`.
# 
# Use `#![cfg_attr(doc_nightly, feature(doc_foo))]` in the `lib.rs` to activate a `rustdoc` feature. Then
# use `#[cfg_attr(doc_nightly, doc(foo))]` in an item.
# 
# Use `RUSTDOCFLAGS="--cfg doc_nightly" cargo +nightly doc` to run `cargo doc` without using `do`.

[dependencies]
# local
zero-ui-proc-macros = { path = "../zero-ui-proc-macros" }
zero-ui-view-api = { path = "../zero-ui-view-api", default-features = false }

# text
font-kit = "0.11"
unic-langid = "0.9"
unicase = "2"
harfbuzz_rs = "2"
xi-unicode = "0.3"
pathfinder_geometry = "0.5"

# task
flume = { version = "0.10", default-features  = false, features = ["async"] }
rayon = "1"
blocking = "1"
parking_lot = "0.12"
futures-timer = "3"
isahc = { version = "1", features = ["cookies", "json"], optional = true }
futures-lite = "1"
async-fs = "1.5"
http-cache-semantics = { version = "1", optional = true }
http-serde = { version = "1", optional = true }

# util
bitflags = "1"
paste = "1"
rustc-hash = "1"
colored = "2"
array-init = "2"
derive_more = "0.99"
once_cell = "1"
byteorder = "1"
tracing = "0.1"
linear-map = "1"
rand = "0.8"
base64 = "0.13"
hashbrown = "0.12.0"
sha2 = "0.10"
fs2 = "0.4.3"
remove_dir_all = "0.7"
async-trait = "0.1"
async-recursion = "1"
pretty-type-name = "1"
num_enum = "0.5"

# serde
serde = "1"
serde_json = "1"

# debug
# backtrace = "0.3"

[dev-dependencies]
pretty_assertions = "1"

[build-dependencies]
zero-ui-docs =  { path = "../zero-ui-docs" }

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-pc-windows-msvc", "x86_64-unknown-linux-gnu"]
rustdoc-args = ["--cfg", "doc_nightly", "--html-in-header", "target/doc/zero-ui-extensions.html"]