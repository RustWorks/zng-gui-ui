#![warn(unused_extern_crates)]
// examples of `widget! { .. }` and `#[property(..)]` need to be declared
// outside the main function, because they generate a `mod` with `use super::*;`
// that does not import `use` clauses declared inside the parent function.
#![allow(clippy::needless_doctest_main)]
#![allow(unstable_name_collisions)]
#![warn(missing_docs)]
#![recursion_limit = "256"]
// suppress nag about very simple boxed closure signatures.
#![allow(clippy::type_complexity)]

//! Core infrastructure required for creating components and running an app.

#[macro_use]
extern crate bitflags;

// to make the proc-macro $crate substitute work in doc-tests.
#[doc(hidden)]
#[allow(unused_extern_crates)]
extern crate self as zero_ui_core;

#[macro_use]
mod crate_util;
pub mod touch;
pub mod undo;

#[cfg(any(test, feature = "test_util"))]
pub use crate_util::test_log;

pub use crate_util::{IdMap, IdSet};

#[doc(hidden)]
pub use paste::paste;

#[doc(inline)]
pub use zero_ui_layout::units;

#[doc(inline)]
pub use zero_ui_task as task;

#[doc(inline)]
pub use zero_ui_color as color;

#[macro_use]
pub mod handler;

pub mod access;
pub mod app;
pub mod border;
pub mod clipboard;
pub mod config;
pub mod context;
pub mod event;
pub mod focus;
pub mod fs_watcher;
pub mod gesture;
pub mod image;
pub mod inspector;
pub mod keyboard;
pub mod l10n;
pub mod mouse;
pub mod pointer_capture;
pub mod render;
pub mod text;
pub mod timer;
pub mod var;
pub mod widget_base;
pub mod widget_builder;
pub mod widget_info;
pub mod widget_instance;
pub mod window;

// proc-macros used internally during widget creation.
#[doc(hidden)]
pub use zero_ui_proc_macros::{property_impl, property_meta, widget_new};

/// Expands an `impl` block into an [`UiNode`] trait implementation or new node declaration.
///
/// Missing [`UiNode`] methods are generated by this macro. The generation is configured in the macro arguments.
/// The arguments can be a single keyword, a delegate or an entire struct declaration.
///
/// The general idea is you implement only the methods required by your node and configure this macro to generate the methods
/// that are just boilerplate UI tree propagation, and in [new node](#new-node) mode var and event handlers can be inited automatically
/// as well.
///
/// # Delegate to single `impl UiNode`
///
/// If your node contains a single child node, like most property nodes, you can configure the code
/// generator to delegate the method calls for the child node.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode};
/// struct MyNode<C> {
///     child: C
/// }
/// #[ui_node(delegate = &mut self.child)]
/// impl<C: UiNode> UiNode for MyNode<C> { }
/// ```
///
/// If the child node is in a field named `child` you can use this shorthand to the same effect:
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode};
/// # struct MyNode<C> { child: C }
/// #[ui_node(child)]
/// impl<C: UiNode> UiNode for MyNode<C> { }
/// ```
///
/// The generated code simply calls the same [`UiNode`] method in the child.
///
/// # Delegate to a `impl UiNodeList`
///
/// If your node contains multiple children nodes in a type that implements [`UiNodeList`],
/// you can configure the code generator to delegate to the equivalent list methods.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::*};
/// struct MyNode<L> {
///     children: L
/// }
/// #[ui_node(delegate_list = &mut self.children)]
/// impl<L: UiNodeList> UiNode for MyNode<L> { }
/// ```
///
/// If the children list is a member named `children` you can use this shorthand to the same effect:
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::*};
/// # struct MyNode<L> { children: L }
/// #[ui_node(children)]
/// impl<L: UiNodeList> UiNode for MyNode<L> { }
/// ```
///
/// The generated code simply calls the equivalent [`UiNodeList`] method in the list.
/// That is the same method name with the `_all` prefix. So `UiNode::init` maps to `UiNodeList::init_all` and so on.
///
/// ## Don't Delegate
///
/// If your node does not have any child nodes you can configure the code generator to generate empty missing methods.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode};
/// # struct MyNode { }
/// #[ui_node(none)]
/// impl UiNode for MyNode { }
/// ```
///
/// The generated [`measure`] and [`layout`] code returns the fill size.
///
/// The other generated methods are empty.
///
/// # Validation
///
/// If delegation is configured but no delegation occurs in the manually implemented methods
/// you get the error ``"auto impl delegates call to `{}` but this manual impl does not"``.
///
/// To disable this error use `#[allow_(zero_ui::missing_delegate)]` in the method or in the `impl` block. The
/// error is also not shown if the method body contains a call to the [`todo!()`] macro.
///
/// The [`measure`] method is an exception to this and will not show the error, its ideal implementation
/// is one where the entire sub-tree is skipped from the the computation.
///
/// # Mixing Methods
///
/// You can use the same `impl` block to define [`UiNode`] methods and
/// associated methods by using this attribute in a `impl` block without trait. The [`UiNode`]
/// methods must be tagged with the `#[UiNode]` pseudo-attribute.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::*, context::*};
/// # struct MyNode { child: BoxedUiNode }
/// #[ui_node(child)]
/// impl MyNode {
///     fn do_the_thing(&mut self) {
///         // ..
///     }
///
///     #[UiNode]
///     fn init(&mut self) {
///         self.child.init();
///         self.do_the_thing();
///     }
///
///     #[UiNode]
///     fn update(&mut self, updates: &WidgetUpdates) {
///         self.child.update(updates);
///         self.do_the_thing();
///     }
/// }
/// ```
///
/// The above code expands to two `impl` blocks, one with the associated method and the other with
/// the [`UiNode`] implementation.
///
/// This is particularly useful for nodes that have a large amount of generic constraints, you just type then once.
///
/// # New Node
///
/// In all the usage seen so far you must declare the `struct` type yourself, and the generic bounds to
/// make it work in the `impl` block, and any var or event in it needs to be subscribed manually. You can
/// avoid this extra boilerplate by declaring the node `struct` as an arg for the macro.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode, context::*, var::*};
/// fn my_widget_node(child: impl UiNode, number: impl IntoVar<u32>) -> impl UiNode {
///     #[ui_node(struct MyNode {
///         child: impl UiNode,
///         #[var] number: impl Var<u32>,
///     })]
///     impl UiNode for MyNode {
///         fn update(&mut self, updates: &WidgetUpdates) {
///             self.child.update(updates);
///             if let Some(n) = self.number.get_new() {
///                 println!("new number: {n}");
///             }
///         }
///     }
///     MyNode {
///         child,
///         number: number.into_var(),
///     }
/// }
/// ```
///
/// In the example above the `MyNode` struct is declared with two generic params: `T_child` and `T_var`, the unimplemented
/// node methods are delegated to `child` because of the name, and the `number` var is subscribed automatically because of
/// the `#[var]` pseudo attribute.
///
/// This syntax can save a lot of typing and improve readability for nodes that have multiple generic parameters, it is ideal
/// for declaring *anonymous* nodes, like those returned by functions with return type `-> impl UiNode`.
///
/// ## Generics
///
/// You can declare named generics in the `struct`, those are copied to the implement block, you can also have members with type
/// `impl Trait`, a named generic is generated for these, the generated name is `T_member`. You can use named generics in the `impl`
/// generics the same way as you would in a function.
///
/// ## Impl Block
///
/// The impl block cannot have any generics, they are added automatically, the `UiNode for` part is optional, like in the delegating
/// mode, if you omit the trait you must annotate each node method with the `#[UiNode]` pseudo attribute.
///
/// ## Delegation
///
/// Delegation is limited to members named `child` or `children`, there is no way to declare a custom delegation in *new node*
/// mode. If no specially named member is present the `none` delegation is used.
///
/// ## Subscription
///
/// You can mark members with the `#[var]` or `#[event]` pseudo attributes to generate initialization code that subscribes the var or
/// event to the [`WIDGET`]  context. The init code is placed in a method with signature `fn auto_subs(&mut self)`,
/// if you manually implement the `init` node method you must call `self.auto_subs();` in it, a compile time error is emitted if the call is missing.
///
/// ## Limitations
///
/// The new node type must be private, you cannot set visibility modifiers. The struct cannot have any attribute set on it, but you can
/// have attributes in members, the `#[cfg]` attribute is copied to generated generics. The `impl Trait` auto-generics only works for
/// the entire type of a generic, you cannot declare a type `Vec<impl Debug>` for example.
///
/// The new node syntax is designed to alleviate the boilerplate of declaring nodes that are just implementation detail of properties and widgets.
///
/// [`UiNode`]: crate::widget_instance::UiNode
/// [`UiNodeList`]: crate::widget_instance::UiNodeList
/// [`measure`]: crate::widget_instance::UiNode::measure
/// [`layout`]: crate::widget_instance::UiNode::layout
/// [`render`]: crate::widget_instance::UiNode::render
/// [`WIDGET`]: crate::context::WIDGET
#[doc(inline)]
pub use zero_ui_proc_macros::ui_node;

/// Expands a function to a widget property.
///
/// Property functions take one [`UiNode`] child input and one or more other inputs and produces a [`UiNode`] that implements
/// the property feature. The attribute expansion does not modify the function, it can still be used as a function directly, some
/// properties are implemented by calling other property functions to generate a derived effect. The attribute expansion generates
/// a hidden module of the same name and visibility, the module contains helper code that defines the property for widgets.
///
/// # Attribute
///
/// The property attribute has one required argument and three optional.
///
/// ## Nest Group
///
/// The first argument is the property [`NestGroup`], written as one the `const` group names. The group defines the overall nest position
/// of the property, for example, `LAYOUT` properties always wrap `FILL` properties. This is important as widgets are open and any combination
/// of properties may end-up instantiated in the same widget.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::{property, widget_instance::UiNode, var::*};
/// #
/// # #[derive(Clone, Debug, PartialEq)] pub struct Align { }
///
/// #[property(LAYOUT)]
/// pub fn align(child: impl UiNode, align: impl IntoVar<Align>) -> impl UiNode {
/// #   child
/// }
/// ```
///
/// The nest group can be tweaked, by adding or subtracting integers, in the example bellow `size` is always inside
/// `max_size`, but both are in the `SIZE` range.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::{property, widget_instance::UiNode, var::*};
/// #
/// # #[derive(Clone, Debug, PartialEq)] pub struct Size { }
///
/// #[property(SIZE+1)]
/// pub fn size(child: impl UiNode, size: impl IntoVar<Size>) -> impl UiNode {
/// #   child
/// }
///
/// #[property(SIZE)]
/// pub fn max_size(child: impl UiNode, size: impl IntoVar<Size>) -> impl UiNode {
/// #   child
/// }
/// ```
///
/// ## Default
///
/// The next argument is an optional `default(args..)`. It defines the value to use when the property must be instantiated and no value was provided.
/// The defaults should cause the property to behave as if it is not set, as the default value will be used in widgets that only set the
/// property in `when` blocks.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::{property, widget_instance::UiNode, color::*, var::*};
///
/// #[property(FILL, default(rgba(0, 0, 0, 0)))]
/// pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode {
/// #   child
/// }
/// ```
///
/// In the example above the `background_color` defines a transparent color as the default, so if the background color is only set in a `when`
/// block if will only be visible when it is active.
///
/// For properties with multiple inputs the default args may be defined in a comma separated list of params, `default(dft0, dft1, ..)`.
///
/// ## Impl For
///
/// The last argument is an optional `impl(<widget-type>)`, it generates `impl <widget-type>` methods for the property strongly associating
/// the property with the widget, users can set this property on the widget or descendants without needing to import the property. Note that
/// this makes the property have priority over all others of the same name, only a derived widget can override with another strongly associated
/// property.
///
/// Note that you can use the [`widget_impl!`] in widget declarations to implement existing properties for a widget.
///
/// ## Capture
///
/// After the nest group and before default the `, capture, ` value indicates that the property is capture-only. This flag
/// changes how the property must be declared, the first argument is a property input and the function can have only one input,
/// no return type is allowed and the function body must be empty, unused input warnings are suppressed by the expanded code.
///
/// Capture-only properties must be captured by a widget and implemented as part of the widget's intrinsics, the reason for
/// a property function is purely to define the property signature and metadata, the capture-only property function can also
/// be used to set a property dynamically, such as in a style widget that is applied on the actual widget that captures the property.
///
/// A documentation sections explaining capture-only properties is generated for the property, it is also tagged differently in the functions list.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::{property, widget_instance::{UiNode, UiNodeList}};
///
/// /// Children property, must be captured by panel widgets.
/// #[property(CONTEXT, capture)]
/// pub fn children(children: impl UiNodeList) { }
/// ```
///
/// # Args
///
/// The property function requires at least two args, the first is the *child* node and the other(s) the input values. The
/// number and type of inputs is validated at compile time, the types are limited and are identified and validated by their
/// token name, so you cannot use renamed types.
///
/// ## Child
///
/// The first function argument must be of type `impl UiNode`, it represents the *child* node and the property node must
/// delegate to it so that the UI tree functions correctly. The type must be an `impl` generic, a full path to [`UiNode`]
/// is allowed, but no import renames as the proc-macro attribute can only use tokens to identify the type.
///
/// ## Inputs
///
/// The second arg and optional other args define the property inputs. When a property is assigned in a widget only these inputs
/// are defined by the user, the *child* arg is provided by the widget builder. Property inputs are limited, and must be identifiable
/// by their token name alone. The types are validated at compile time, the `impl` generic types must be declared using `impl` generics,
/// a full path to the generic traits is allowed, but no import renames.
///
/// ### Input Types
///
/// These are the allowed input types:
///
/// #### `impl IntoVar<T>`
///
/// The most common type, accepts any value that can be converted [`IntoVar<T>`], usually the property defines the `T`, but it can be generic.
/// The property node must respond to var updates. The input kind is [`InputKind::Var`]. No auto-default is generated for this type, property
/// implementation should provide a default value that causes the property to behave as if it was not set.
///
/// Only properties with inputs exclusive of this kind can be assigned in `when` blocks. The inputs can also be read in `when` expressions.
///
/// ##### Getter Properties
///
/// Most properties with var inputs are *setters*, that is the inputs configure an effect on the widget. But some properties
/// can be *getters*, detecting widget state and setting it on the *input* variable. These properties are usually named with
/// a prefix that indicates their input is actually for getting state, the prefixes `is_` and `has_` mark a property with
/// a single `bool` input that reads a widget state, the prefix `get_` and `actual_` marks a property that reads a non-boolean state from
/// the widget.
///
/// Getter properties are configured with a default read-write variable, so that they can be used in `when` expressions directly,
/// for example, `when *#is_pressed`, the `is_pressed` property has a `default(var(false))`, so it automatically initializes
/// with a read-write variable that is used in the when condition. The property attribute tries to generate defaults automatically
/// based on the prefix, attempting to use a read-write var with the `T::default()`, this can be overwritten just by setting
/// the default, but it enforces the requirement of a default, it is not possible to declare a getter property without default.
///
/// #### `impl IntoValue<T>`
///
/// The [`IntoValue<T>`] defines an initialization input that does not change for the property node instance, usually the property
/// defines the `T`, but it can be generic. The input kind is [`InputKind::Value`]. No auto-default is generated for this type.
///
/// The input can be read in `when` expressions, but cannot be assigned in `when` blocks.
///
/// #### `impl UiNode`
///
/// This input accepts another [`UiNode`], the implementation must handle it like it handles the *child* node, delegating all methods. The
/// input kind is [`InputKind::UiNode`]. The [`NilUiNode`] is used as the default value if no other is provided.
///
/// The input cannot be read in `when` expressions and cannot be assigned in `when` blocks.
///
/// #### `impl UiNodeList`
///
/// This input accepts another [`UiNodeList`], the implementation must handle it like it handles the *child* node, delegating all methods. The
/// input kind is [`InputKind::UiNodeList`]. An empty list is used as the default value if no other is provided.
///
/// The input cannot be read in `when` expressions and cannot be assigned in `when` blocks.
///
/// #### `impl WidgetHandler<A>`
///
/// This input accepts any [`WidgetHandler<A>`] for the argument type `A`, usually the property defines the `A`, but it can be generic.
/// The input kind is [`InputKind::WidgetHandler`]. A no-op handler is used for the default if no other is provided.
///
/// The input cannot be read in `when` expressions and cannot be assigned in `when` blocks.
///
/// Event handler properties usually have the `on_` name prefix and are generated by the [`event_property!`] macro.
///
/// # Generics
///
/// Apart from the `impl` generics of inputs and *child* a very limited named generic types is supported, only `T: VarValue`, that is
/// an simple ident name constrained by [`VarValue`]. Named generics can only be used as the argument for `impl IntoVar<T>`, `impl IntoValue<T>`
/// and `impl WidgetHandler<T>`.
///
/// # Output
///
/// The property output type must be any type that implements [`UiNode`], usually an opaque type `impl UiNode` is used. The property
/// node can be anything, as long as it delegates to the child node, see [`ui_node`] about implementing a node. Some common
/// property patterns have helpers functions, for example, to setup a context var you can use [`with_context_var`] function.
///
/// # More Details
///
/// See [`property_id!`] and [`property_args!`] for more details about what kind of meta-code is generated for properties.
///
/// [`NestGroup`]: crate::widget_builder::NestGroup
/// [`property_id!`]: crate::widget_builder::property_id
/// [`property_args!`]: crate::widget_builder::property_args
/// [`ui_node`]: macro@ui_node
/// [`with_context_var`]: zero_ui_core::var::with_context_var
/// [`VarValue`]: crate::var::VarValue
/// [`IntoValue<T>`]: crate::var::IntoValue
/// [`IntoVar<T>`]: crate::var::IntoVar
/// [`WidgetHandler<A>`]: crate::handler::WidgetHandler
/// [`UiNode`]: crate::widget_instance::UiNode
/// [`UiNodeList`]: crate::widget_instance::UiNodeList
/// [`NilUiNode`]: crate::widget_instance::NilUiNode
/// [`InputKind::Var`]: crate::widget_builder::InputKind::Var
/// [`InputKind::Value`]: crate::widget_builder::InputKind::Value
/// [`InputKind::UiNode`]: crate::widget_builder::InputKind::UiNode
/// [`InputKind::UiNodeList`]: crate::widget_builder::InputKind::UiNodeList
/// [`InputKind::WidgetHandler`]: crate::widget_builder::InputKind::WidgetHandler
/// [`event_property!`]: crate::event::event_property
#[doc(inline)]
pub use zero_ui_proc_macros::property;

/// Expands a struct to a widget struct and macro.
///
/// Each widget is a struct and macro pair that construct a [`WidgetBuilder`] and instantiates a custom widget type.  Widgets
/// *inherit* from one other widget, they can have intrinsic nodes and default properties and can build to a custom output type,
/// the `#[property(.., widget_impl(Widget))]` macro can be used to declare intrinsic properties that are always available in a widget.
///
/// # Attribute
///
/// The widget attribute must be placed in a `struct Name(Parent);` struct declaration, only struct following the exact pattern are allowed,
/// different struct syntaxes will generate a compile error.
///
/// The attribute requires one argument, it must be a macro style `$crate` path to the widget struct, this is used in the generated macro
/// to find the struct during instantiation. The path must be to the *public* path to the struct, that is, the same path that will be used
/// to import the widget. After the required widget path [custom rules] for the generated macro can be declared.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::widget;
///
/// /// Minimal widget.
/// #[widget($crate::Foo)]
/// pub struct Foo(zero_ui_core::widget_base::WidgetBase);
/// ```
///
/// # Inherit
///
/// The widget struct one unnamed member must be a path to the parent widget type, all widgets must inherit from another or the
/// [`WidgetBase`], the parent widget(s) intrinsic properties and nodes are all included in the new widget. The intrinsic
/// properties are included by deref, the new widget will dereference to the parent widget, during widget build auto-deref will select
/// the property methods first, this mechanism even allows for property overrides.
///
/// # Intrinsic
///
/// The widget struct can define a method `widget_intrinsic` that *includes* custom build actions in the [`WidgetBuilder`], this special
/// method will be called once for its own widget or derived widgets.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::{widget, widget_base::*, widget_builder::*};
///
/// #[widget($crate::Foo)]
/// pub struct Foo(WidgetBase);
///
/// impl Foo {
///     fn widget_intrinsic(&mut self) {
///         self.widget_builder().push_build_action(|b| {
///             // push_intrinsic, capture_var.
///         });
///     }
/// }
/// ```
///
/// The example above demonstrate the function used to [`push_build_action`]. This is the primary mechanism for widgets to define their
/// own behavior that does not depend on properties. Note that the widget inherits from [`WidgetBase`], during [instantiation](#instantiation)
/// of `Foo!` the base `widget_intrinsic` is called first, then the `Foo!` `widget_intrinsic` is called.
///
/// The method does not need to be `pub`, and is not required.
///
/// # Build
///
/// The widget struct can define a method that *builds* the final widget instance.
///
/// ```
/// # fn main() { }
/// use zero_ui_core::{widget, widget_base, widget_builder::*, widget_instance::*};
///
/// #[widget($crate::Foo)]
/// pub struct Foo(widget_base::WidgetBase);
///
/// impl Foo {
///     /// Custom build.
///     pub fn widget_build(&mut self) -> impl UiNode {
///         widget_base::nodes::build(self.widget_take())
///     }
/// }
/// ```
///
/// The build method must have the same visibility as the widget, and can define its own
/// return type, this is the **widget type**. If the build method is not defined the inherited parent build method is used.
///
/// Unlike the [widget_intrinsic](#intrinsic) method, the widget only has one `widget_build`, if defined it overrides the parent
/// `widget_build`. Most widgets don't define their own build, leaving it to be inherited from [`WidgetBase`]. The base type
/// is an opaque `impl UiNode`, normal widgets must implement [`UiNode`], otherwise they cannot be used as child of other widgets,
/// the widget outer-node also must implement the widget context, to ensure that the widget is correctly placed in the UI tree.
/// The base widget implementation is in [`widget_base::nodes::widget`], you can use it directly, so even if you need to run code
/// on build or define a custom type you don't need to start from scratch.
///
/// # Defaults
///
/// The [`widget_set!`] macro can be used inside `widget_intrinsic` to set properties and when conditions that are applied on the widget if not
/// overridden by derived widgets or the widget instance code. During the call to `widget_intrinsic` the `self.importance()` value is [`Importance::WIDGET`],
/// after it is changed to [`Importance::INSTANCE`], so just by setting properties in `widget_intrinsic` they define the *default* value.
///
/// # Impl Properties
///
/// The [`widget_impl!`] macro can be used inside a `impl WgtIdent { }` block to strongly associate a property with the widget,
/// and the [`property`] attribute has an `impl(WgtIdent)` that also strongly associates a property with the widget. These two mechanisms
/// can be used to define properties for the widget, the impl properties are visually different in the widget macro as the have the
/// *immutable method* style, while the other properties have the *mutable method* style.
///
/// # Generated Macro
///
/// The generated widget macro has the same syntax as [`widget_set!`], except that is also starts the widget and builds it at the end,
/// ```
/// # use zero_ui_core::{*, widget_base::WidgetBase};
/// #[widget($crate::Foo)]
/// pub struct Foo(WidgetBase);
///
/// # fn main() {
/// let wgt = Foo! {
///     id = "foo";
/// };
///
/// // equivalent to:
///
/// let wgt = {
///     let mut wgt = Foo::widget_new();
///     widget_set! {
///         &mut wgt;
///         id = "foo";
///     }
///     wgt.widget_build()
/// };
/// # }
/// ```
///
/// ## Custom Rules
///
/// You can declare custom rules for the widget macro, this can be used to declare **custom shorthand** syntax for the widget.
///
/// The custom rules are declared inside braces after the widget path in the widget attribute. The syntax is similar to `macro_rules!`
/// rules, but the expanded tokens are the direct input of the normal widget expansion.
///
/// ```txt
/// (<rule>) => { <init> };
/// ```
///
/// The `<rule>` is any macro pattern rule, the `<init>` is the normal widget init code that the rule expands to.
///
/// Note that custom rules are not inherited, they apply only to the declaring widget macro, inherited widgets must replicate
/// the rules if desired.
///
/// ### Examples
///
/// Example of a text widget that declares a shorthand syntax to implicitly set a `txt` property:
///
/// ```
/// # use zero_ui_core::{*, widget_base::WidgetBase};
/// #[widget($crate::Foo {
///     ($id:tt) => {
///         id = $id;
///     };
/// })]
/// pub struct Foo(WidgetBase);
///
/// # fn main() {
/// let wgt = Foo!("foo");
/// # }
/// ```
///
/// The macro instance above is equivalent to:
///
/// ```
/// # use zero_ui_core::{*, widget_base::WidgetBase};
/// # #[widget($crate::Foo)]
/// # pub struct Foo(WidgetBase);
///
/// # fn main() {
/// let wgt = Foo! {
///     id = "foo";
/// };
/// # }
/// ```
///
/// ### Limitations
///
/// The expanded tokens can only be a recursive input for the same widget macro, you can't expand to a different widget.
///
/// Some rules are intercepted by the default widget rules:
///
/// * `$(#[$attr:meta])* $property:ident = $($rest:tt)*`, blocks all custom `$ident = $tt*` patterns.
/// * `$(#[$attr:meta])* when $($rest:tt)*`, blocks all custom `when $tt*` patterns.
///
/// Note that the default single property shorthand syntax is not blocked, in the examples above `Text!(font_size)` will match
/// the custom shorthand rule and try to set the `txt` with the `font_size` variable, without the shorthand it would create a widget without
/// `txt` but with a set `font_size`. So a custom rule `$p:expr` is only recommended for widgets that have a property of central importance.
///
/// # Widget Type
///
/// A public associated function `widget_type` is also generated for the widget, it returns a [`WidgetType`] instance that describes the
/// widget type.
///
/// # Builder
///
/// Two public methods are available to call in a generated widget struct, `builder` and `take_builder` that first mutable borrows the
/// underlying [`WidgetBuilder`] and is usually used in `widget_intrinsic` to insert build actions, the second finalizes the insertion of
/// properties and returns the [`WidgetBuilder`] instance for use finalizing the build, this is usually called in custom `widget_build` implementations.
///
/// See the [`WidgetBuilder`], [`WidgetBuilding`], [`NestGroup`] and [`Importance`] for more details.
///
/// [`WidgetBuilder`]: widget_builder::WidgetBuilder
/// [`WidgetType`]: widget_builder::WidgetType
/// [`WidgetBuilding`]: widget_builder::WidgetBuilding
/// [`NestGroup`]: widget_builder::NestGroup
/// [`Importance`]: widget_builder::Importance
/// [`push_build_action`]: widget_builder::WidgetBuilder::push_build_action
/// [`UiNode`]: widget_instance::UiNode
/// [`WidgetBase`]: struct@widget_base::WidgetBase
/// [`Importance::WIDGET`]: widget_builder::Importance::WIDGET
/// [`Importance::INSTANCE`]: widget_builder::Importance::INSTANCE
#[doc(inline)]
pub use zero_ui_proc_macros::widget;

/// Expands a struct to a widget mixin.
///
/// Widget mix-ins can be inserted on a widgets inheritance chain, but they cannot be instantiated directly. Unlike
/// the full widgets it defines its parent as a generic type, that must be filled with a real widget when used.
///
/// By convention mix-ins have the prefix `Mix` and the generic parent is named `P`. The `P` must not have any generic bounds
/// in the declaration, the expansion will bound it to [`widget_base::WidgetImpl`].
///
/// # Examples
///
/// ```
/// # use zero_ui_core::{*, widget_instance::*, var::*, widget_base::*};
/// # #[property(CONTEXT)] pub fn focusable(child: impl UiNode, enabled: impl IntoVar<bool>) -> impl UiNode { child }
/// #
/// /// Make a widget capable of receiving keyboard focus.
/// #[widget_mixin]
/// pub struct FocusableMix<P>(P);
/// impl<P: WidgetImpl> FocusableMix<P> {
///     fn widget_intrinsic(&mut self) {
///         widget_set! {
///             self;
///             focusable = true;
///         }
///     }
///     
///     widget_impl! {
///         /// If the widget can receive focus, enabled by default.
///         pub focusable(enabled: impl IntoVar<bool>);
///     }
/// }
///
/// /// Foo is focusable.
/// #[widget($crate::Foo)]
/// pub struct Foo(FocusableMix<WidgetBase>);
/// # fn main() { }
/// ```
///
/// The example above declares a mixin `FocusableMix<P>` and an widget `Foo`, the mixin is used as a parent of the widget, only
/// the `Foo! { }` widget can be instantiated, and it will have the strongly associated property `focusable`.
///
/// All widget `impl` items can be declared in a mixin, including the `fn widget_build(&mut self) -> T`, multiple mix-ins can be inherited
/// by nesting the types in a full widget `Foo(AMix<BMix<Base>>)`, mix-ins cannot inherit even from other mix-ins.
#[doc(inline)]
pub use zero_ui_proc_macros::widget_mixin;

mod tests;

mod private {
    // https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed
    pub trait Sealed {}
}

/// Sets properties and when condition on a widget builder.
///
/// # Examples
///
/// ```
/// # use zero_ui_core::{*, widget_base::*};
/// # #[widget($crate::Wgt)]
/// #  pub struct Wgt(WidgetBase);
/// # fn main() {
/// # let flag = true;
///
/// let mut wgt = Wgt::widget_new();
///
/// if flag {
///     widget_set! {
///         &mut wgt;
///         enabled = false;
///     }
/// }
///
/// widget_set! {
///     &mut wgt;
///     id = "wgt";
/// }
///
/// let wgt = wgt.widget_build();
/// # }
/// ```
///
/// In the example above the widget will always build with custom `id`, but only will set `enabled = false` when `flag` is `true`.
///
/// Note that properties are designed to have a default *neutral* value that behaves as if unset, in the example case you could more easily write:
///
/// ```
/// # use zero_ui_core::{*, widget_base::*};
/// # #[widget($crate::Wgt)]
/// #  pub struct Wgt(WidgetBase);
/// # fn main() {
/// # let flag = true;
/// let wgt = Wgt! {
///     enabled = !flag;
///     id = "wgt";
/// };
/// # }
/// ```
///
/// You should use this macro only in contexts where a widget will be build in steps, or in very hot code paths where a widget
/// has many properties and only some will be non-default per instance.
///
///
///
/// # Property Set
///
/// Properties can be assigned using the `property = value;` syntax, this expands to a call to the property method, either
/// directly implemented on the widget or from a trait.
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// id = "test";
/// background_color = colors::BLUE;
/// # }; }
/// ```
///
/// The example above is equivalent to:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let mut wgt = zero_ui_core::widget_base::WidgetBase::widget_new();
/// wgt.id("test");
/// wgt.background_color(colors::BLUE);
/// # }
/// ```
///
/// Note that `id` is an intrinsic property inherited from [`WidgetBase`], but `background_color` is an extension property declared
/// by a [`property`] function. Extension properties require `&mut self` access to the widget, intrinsic properties only require `&self`,
/// this is done so that IDEs that use a different style for mutable methods highlight the properties that are not intrinsic to the widget.
///
/// ## Path Set
///
/// An full or partial path can be used to specify exactly what extension property will be set:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// self::background_color = colors::BLUE;
/// # }; }
/// ```
///
/// In the example above `self::background_color` specify that an extension property that is imported in the `self` module must be set,
/// even if the widget gets an intrinsic `background_color` property the extension property will still be used.
///
/// The example above is equivalent to:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let mut wgt = zero_ui_core::widget_base::WidgetBase::widget_new();
/// self::background_color::background_color(&mut wgt, colors::BLUE);
/// # }
/// ```
///
/// ## Named Set
///
/// Properties can have multiple parameters, multiple parameters can be set using the struct init syntax:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// border = {
///     widths: 1,
///     sides: colors::RED,
/// };
/// # }; }
/// ```
///
/// Note that just like in struct init the parameters don't need to be in order:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// border = {
///     sides: colors::RED,
///     widths: 1,
/// };
/// # }; }
/// ```
///
/// Internally each property method has auxiliary methods that validate the member names and construct the property using sorted params, therefore
/// accepting any parameter order. Note each parameter is evaluated in the order they appear, even if they are assigned in a different order after.
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// let mut eval_order = vec![];
///
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// border = {
///     sides: {
///         eval_order.push("sides");
///         colors::RED
///     },
///     widths: {
///         eval_order.push("widths");
///         1
///     },
/// };
/// # };
///
/// assert_eq!(eval_order, vec!["sides", "widths"]);
/// # }
/// ```
///
/// ## Unnamed Set Multiple
///
/// Properties with multiple parameters don't need to be set using the named syntax:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// border = 1, colors::RED;
/// # }; }
/// ```
///
/// The example above is equivalent to:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let mut wgt = zero_ui_core::widget_base::WidgetBase::widget_new();
/// wgt.border(1, colors::RED);
/// # }
/// ```
///
/// ## Shorthand Set
///
/// Is a variable with the same name as a property is in context the `= name` can be omitted:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// let id = "name";
/// let background_color = colors::BLUE;
/// let widths = 1;
///
/// let wgt = zero_ui_core::widget_base::WidgetBase! {
///     id;
///     self::background_color;
///     border = {
///         widths,
///         sides: colors::RED,
///     };
/// };
/// # }
/// ```
///
/// Note that the shorthand syntax also works for path properties and parameter names.
///
/// The above is equivalent to:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// let id = "name";
/// let background_color = colors::BLUE;
/// let widths = 1;
///
/// let wgt = zero_ui_core::widget_base::WidgetBase! {
///     id = id;
///     self::background_color = background_color;
///     border = {
///         widths: widths,
///         sides: colors::RED,
///     };
/// };
/// # }
/// ```
///
/// # Property Unset
///
/// All properties can be assigned to an special value `unset!`, that *removes* a property, when the widget is build the
/// unset property will not be instantiated:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// border = unset!;
/// # }; }
/// ```
///
/// The example above is equivalent to:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, units::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn border(child: impl UiNode, widths: impl IntoVar<SideOffsets>, sides: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # fn main() {
/// # let mut wgt = zero_ui_core::widget_base::WidgetBase::widget_new();
/// wgt.unset_border();
/// # }
/// ```
///
/// Each property method generates an auxiliary `unset_property` method, the unset is registered in the widget builder using the current
/// importance, in `widget_intrinsic` they only unset already inherited default assigns, in instances it unsets all inherited or
/// previous assigns, see [`WidgetBuilder::push_unset`] for more details.
///
/// # Generic Properties
///
/// Generic properties need a *turbofish* annotation on assign:
///
/// ```
/// # use zero_ui_core::{*, var::*, color::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn value<T: VarValue>(child: impl UiNode, value: impl IntoVar<T>) -> impl UiNode { child }
/// #
/// # fn main() {
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// value::<f32> = 1.0;
/// # };}
/// ```
///
/// # When
///
/// Conditional property assigns can be setup using `when` blocks. A `when` block has a `bool` expression and multiple property assigns,
/// when the expression is `true` each property has the assigned value, unless it is overridden by a later `when` block.
///
///  ```
///  # use zero_ui_core::{*, var::*, color::*, widget_instance::*};
/// # #[property(CONTEXT)] pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode { child }
/// # #[property(EVENT)] pub fn is_pressed(child: impl UiNode, state: impl IntoVar<bool>) -> impl UiNode { child }
/// # fn main() {
/// # let _scope = app::App::minimal();
/// # let wgt = zero_ui_core::widget_base::WidgetBase! {
/// background_color = colors::RED;
///
/// when *#is_pressed {
///     background_color = colors::GREEN;
/// }
/// # }; }
/// ```
///
/// ## When Condition
///
/// The `when` block defines a condition expression, in the example above this is `*#is_pressed`. The expression can be any Rust expression
/// that results in a [`bool`] value, you can reference properties in it using the `#` token followed by the property name or path and you
/// can reference variables in it using the `#{var}` syntax. If a property or var is reference the `when` block is dynamic, updating all
/// assigned properties when the expression result changes.
///
/// ### Property Reference
///
/// The most common `when` expression reference is a property, in the example above the `is_pressed` property is instantiated for the widget
/// and it's input read-write var controls when the background is set to green. Note that a reference to the value is inserted in the expression
/// so an extra deref `*` is required. A property can also be referenced with a path, `#properties::is_pressed` also works.
///
/// The syntax seen so far is actually a shorthand way to reference the first input of a property, the full syntax is `#is_pressed.0` or
/// `#is_pressed.state`. You can use the extended syntax to reference inputs of properties with out than one input, the input can be
/// reference by tuple-style index or by name. Note that if the value it self is a tuple or `struct` you need to use the extended syntax
/// to reference a member of the value, `#foo.0.0` or `#foo.0.name`. Methods have no ambiguity, `#foo.name()` is the same as `#foo.0.name()`.
///
/// Not all properties can be referenced in `when` conditions, only inputs of type `impl IntoVar<T>` and `impl IntoValue<T>` are
/// allowed, attempting to reference a different kind of input generates a compile error.
///
/// ### Variable Reference
///
/// Other variable can also be referenced, context variables or any locally declared variable can be referenced. Like with properties
/// the variable value is inserted in the expression as a reference  so you may need to deref in case the var is a simple [`Copy`] value.
///
/// ```
/// # use zero_ui_core::{*, widget_builder::*, widget_instance::*, color::*, var::*};
/// #
/// # #[property(FILL)]
/// # pub fn background_color(child: impl UiNode, color: impl IntoVar<Rgba>) -> impl UiNode {
/// #   let _ = color;
/// #   child
/// # }
/// #
/// context_var! {
///     pub static FOO_VAR: Vec<&'static str> = vec![];
///     pub static BAR_VAR: bool = false;
/// }
/// # fn main() {
/// # let _scope = app::App::minimal();
/// # let wgt = widget_base::WidgetBase! {
/// background_color = colors::RED;
///
/// when !*#{BAR_VAR} && #{FOO_VAR}.contains(&"green") {
///     background_color = colors::GREEN;
/// }
/// # };}
/// ```
///
/// ## When Assigns
///
/// Inside the `when` block a list of property assigns is expected, most properties can be assigned, but `impl IntoValue<T>` properties cannot,
/// you also cannot `unset!` in when assigns, a compile time error happens if the property cannot be when assigned.
///
/// On instantiation a single instance of the property will be generated, the parameters will track the when expression state and update
/// to the value assigned when it is `true`. When no block is `true` the value assigned to the property outside `when` blocks is used, or the property default value. When more then one block is `true` the *last* one sets the value.
///
/// ### Default Values
///
/// A when assign can be defined by a property without setting a default value, during instantiation if the property declaration has
/// a default value it is used, or if the property was later assigned a value it is used as *default*, if it is not possible to generate
/// a default value the property is not instantiated and the when assign is not used.
///
/// The same apply for properties referenced in the condition expression, note that all `is_state` properties have a default value so
/// it is more rare that a default value is not available. If a condition property cannot be generated the entire when block is ignored.
///
/// [`WidgetBase`]: struct@crate::widget_base::WidgetBase
/// [`WidgetBuilder::push_unset`]: crate::widget_builder::WidgetBuilder::push_unset
#[macro_export]
macro_rules! widget_set {
    (
        $(#[$skip:meta])*
        $($invalid:ident)::+ = $($tt:tt)*
    ) => {
        compile_error!{"expected `&mut <wgt>;` at the beginning"}
    };
    (
        $(#[$skip:meta])*
        when = $($invalid:tt)*
    ) => {
        compile_error!{"expected `&mut <wgt>;` at the beginning"}
    };
    (
        $wgt_mut:ident;
        $($tt:tt)*
    ) => {
        $crate::widget_set! {
            &mut *$wgt_mut;
            $($tt)*
        }
    };
    (
        $wgt_borrow_mut:expr;
        $($tt:tt)*
    ) => {
        $crate::widget_new! {
            new {
                let wgt__ = $wgt_borrow_mut;
            }
            build { }
            set { $($tt)* }
        }
    };
}

/// Implement a property on the widget to strongly associate it with the widget.
///
/// This is equivalent of the `impl(Widget)` directive in the [`property`] macro, but generates
#[macro_export]
macro_rules! widget_impl {
    (
        $(
            $(#[$attr:meta])*
            $vis:vis $($property:ident)::+ ($($arg:ident : $arg_ty:ty)*);
        )+
    ) => {
        $(
            $crate::property_impl! {
                attrs { $(#[$attr])* }
                vis { $vis }
                path { $($property)::* }
                args { $($arg:$arg_ty),* }
            }
        )+
    }
}
