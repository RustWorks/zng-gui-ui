#![warn(unused_extern_crates)]
// examples of `widget! { .. }` and `#[property(..)]` need to be declared
// outside the main function, because they generate a `mod` with `use super::*;`
// that does not import `use` clauses declared inside the parent function.
#![allow(clippy::needless_doctest_main)]
#![allow(unstable_name_collisions)]
#![warn(missing_docs)]
#![cfg_attr(doc_nightly, feature(doc_cfg))]
#![cfg_attr(doc_nightly, feature(doc_notable_trait))]
#![recursion_limit = "256"]
// suppress nag about very simple boxed closure signatures.
#![allow(clippy::type_complexity)]

//! Core infrastructure required for creating components and running an app.

#[macro_use]
extern crate bitflags;

// to make the proc-macro $crate substitute work in doc-tests.
#[doc(hidden)]
#[allow(unused_extern_crates)]
extern crate self as zero_ui_core;

#[macro_use]
mod crate_util;

#[cfg(any(test, feature = "test_util"))]
pub use crate_util::test_log;

#[doc(hidden)]
pub use paste::paste;

#[macro_use]
pub mod handler;

pub mod app;
pub mod border;
pub mod color;
pub mod config;
pub mod context;
pub mod event;
pub mod focus;
pub mod gesture;
pub mod gradient;
pub mod image;
pub mod inspector;
pub mod keyboard;
pub mod mouse;
pub mod render;
pub mod service;
pub mod task;
pub mod text;
pub mod timer;
pub mod units;
pub mod var;
pub mod widget_base;
pub mod widget_builder;
pub mod widget_info;
pub mod widget_instance;
pub mod window;

// proc-macros used internally during widget creation.
#[doc(hidden)]
pub use zero_ui_proc_macros::widget_new;

/// Expands an `impl` block into an [`UiNode`] trait implementation or new node declaration.
///
/// Missing [`UiNode`] methods are generated by this macro. The generation is configured in the macro arguments.
/// The arguments can be a single keyword, a pair of delegates or an entire struct declaration.
///
/// The general idea is you implement only the methods required by your node and configure this macro to generate the methods
/// that are just boilerplate UI tree propagation, and in [new node](#new-node) mode var and event handlers can be inited automatically
/// as well.
///
/// # Delegate to single `impl UiNode`
///
/// If your node contains a single child node, like most property nodes, you can configure the code
/// generator to delegate the method calls for the child node.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode};
/// struct MyNode<C> {
///     child: C
/// }
/// #[ui_node(
///     // Expression that borrows the delegation target node.
///     delegate = &self.child,
///     // Expression that exclusive borrows the delegation target node.
///     delegate_mut = &mut self.child,
/// )]
/// impl<C: UiNode> UiNode for MyNode<C> { }
/// ```
///
/// If the child node is in a field named `child` you can use this shorthand to the same effect:
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode};
/// # struct MyNode<C> { child: C }
/// #[ui_node(child)]
/// impl<C: UiNode> UiNode for MyNode<C> { }
/// ```
///
/// The generated code simply calls the same [`UiNode`] method in the child.
///
/// # Delegate to a `impl UiNodeList`
///
/// If your node contains multiple children nodes in a type that implements [`UiNodeList`],
/// you can configure the code generator to delegate to the equivalent list methods.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::*};
/// struct MyNode<L> {
///     children: L
/// }
/// #[ui_node(
///     // Expression that borrows the delegation target list.
///     delegate_list = &self.children,
///     // Expression that exclusive borrows the delegation target list.
///     delegate_list_mut = &mut self.children,
/// )]
/// impl<L: UiNodeList> UiNode for MyNode<L> { }
/// ```
///
/// If the children list is a member named `children` you can use this shorthand to the same effect:
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::*};
/// # struct MyNode<L> { children: L }
/// #[ui_node(children)]
/// impl<L: UiNodeList> UiNode for MyNode<L> { }
/// ```
///
/// The generated code simply calls the equivalent [`UiNodeList`] method in the list.
/// That is the same method name with the `_all` prefix. So `UiNode::init` maps to `UiNodeList::init_all` and so on.
///
/// ## Don't Delegate
///
/// If your node does not have any child nodes you can configure the code generator to generate empty missing methods.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode};
/// # struct MyNode { }
/// #[ui_node(none)]
/// impl UiNode for MyNode { }
/// ```
///
/// The generated [`measure`] and [`layout`] code returns the fill size.
///
/// The other generated methods are empty.
///
/// # Validation
///
/// If delegation is configured but no delegation occurs in the manually implemented methods
/// you get the error ``"auto impl delegates call to `{}` but this manual impl does not"``.
///
/// To disable this error use `#[allow_(zero_ui::missing_delegate)]` in the method or in the `impl` block.
///
/// The [`measure`] method is an exception to this and will not show the error, its ideal implementation
/// is one where the entire sub-tree is skipped from the the computation.
///
/// # Mixing Methods
///
/// You can use the same `impl` block to define [`UiNode`] methods and
/// associated methods by using this attribute in a `impl` block without trait. The [`UiNode`]
/// methods must be tagged with the `#[UiNode]` pseudo-attribute.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::*, context::*};
/// # struct MyNode { child: BoxedUiNode }
/// #[ui_node(child)]
/// impl MyNode {
///     fn do_the_thing(&mut self, ctx: &mut WidgetContext) {
///         // ..
///     }
///
///     #[UiNode]
///     fn init(&mut self, ctx: &mut WidgetContext) {
///         self.child.init(ctx);
///         self.do_the_thing(ctx);
///     }
///
///     #[UiNode]
///     fn update(&mut self, ctx: &mut WidgetContext, updates: &mut WidgetUpdates) {
///         self.child.update(ctx, updates);
///         self.do_the_thing(ctx);
///     }
/// }
/// ```
///
/// The above code expands to two `impl` blocks, one with the associated method and the other with
/// the [`UiNode`] implementation.
///
/// This is particularly useful for nodes that have a large amount of generic constrains, you just type then once.
///
/// # New Node
///
/// In all the usage seen so far you must declare the `struct` type yourself, and the generic bounds to
/// make it work in the `impl` block, and any var or event in it needs to be subscribed manually. You can
/// avoid this extra boilerplate by declaring the node `struct` as an arg for the macro.
///
/// ```
/// # use zero_ui_core::{ui_node, widget_instance::UiNode, context::*, var::*};
/// fn my_widget_node(child: impl UiNode, number: impl IntoVar<u32>) -> impl UiNode {
///     #[ui_node(struct MyNode {
///         child: impl UiNode,
///         #[var] number: impl Var<u32>,
///     })]
///     impl UiNode for MyNode {
///         fn update(&mut self, ctx: &mut WidgetContext, updates: &mut WidgetUpdates) {
///             self.child.update(ctx, updates);
///             if let Some(n) = self.number.get_new(ctx) {
///                 println!("new number: {n}");
///             }
///         }
///     }
///     MyNode {
///         child,
///         number: number.into_var(),
///     }
/// }
/// ```
///
/// In the example above the `MyNode` struct is declared with two generic params: `T_child` and `T_var`, the unimplemented
/// node methods are delegated to `child` because of the name, and the `number` var is subscribed automatically because of
/// the `#[var]` pseudo attribute.
///
/// This syntax can save a lot of typing and improve readability for nodes that have multiple generic parameters, it is ideal
/// for declaring *anonymous* nodes, like those returned by functions with return type `-> impl UiNode`.
///
/// ## Generics
///
/// You can declare named generics in the `struct`, those are copied to the implement block, you can also have members with type
/// `impl Trait`, a named generic is generated for these, the generated name is `T_member`. You can use named generics in the `impl`
/// generics the same way as you would in a function.
///
/// ## Impl Block
///
/// The impl block cannot have any generics, they are added automatically, the `UiNode for` part is optional, like in the delegating
/// mode, if you omit the trait you must annotate each node method with the `#[UiNode]` pseudo attribute.
///
/// ## Delegation
///
/// Delegation is limited to members named `child` or `children`, there is no way to declare a custom delegation in *new node*
/// mode. If no specially named member is present the `none` delegation is used.
///
/// ## Subscription
///
/// You can mark members with the `#[var]` or `#[event]` pseudo attributes to generate initialization code that subscribes the var or
/// event to the [`WidgetContext::handles`]. The init code is placed in a method with signature `fn init_handles(&mut self, &mut WidgetContext)`,
/// if you manually implement the `init` node method you must call `self.init_handles(ctx);` in it.
///
/// ## Limitations
///
/// The new node type must be private, you cannot set visibility modifiers. The struct cannot have any attribute set on it, but you can
/// have attributes in members, the `#[cfg]` attribute is copied to generated generics. The `impl Trait` auto-generics only works for
/// the entire type of a generic, you cannot declare a type `Vec<impl Debug>` for example.
///
/// The new node syntax is designed to alleviate the boilerplate of declaring nodes that are just implementation detail of properties and widgets.
///
/// [`UiNode`]: crate::UiNode
/// [`UiNodeList`]: crate::UiNodeList
/// [`measure`]: crate::UiNode::measure
/// [`layout`]: crate::UiNode::layout
/// [`render`]: crate::UiNode::render
/// [`WidgetContext::handles`]: crate::context::WidgetContext::handles
///
/// <div style='display:none'>
#[doc(inline)]
pub use zero_ui_proc_macros::ui_node;

/// Expands a function to a widget property module.
/// TODO !!:
#[doc(inline)]
pub use zero_ui_proc_macros::property;

/// Expands a module to a widget module and macro.
/// TODO !!:
#[doc(inline)]
pub use zero_ui_proc_macros::widget;

/// Expands a module to a widget mix-in module and macro.
/// TODO !!:
#[doc(inline)]
pub use zero_ui_proc_macros::widget_mixin;

mod tests;

mod private {
    // https://rust-lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-against-downstream-implementations-c-sealed
    pub trait Sealed {}
}
