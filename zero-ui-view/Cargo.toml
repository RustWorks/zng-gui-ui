[package]
name = "zero-ui-view"
version = "0.1.0"
authors = ["Samuel Guerra <sam.rodr.g@gmail.com>", "Well <well-r@hotmail.com>"]
edition = "2021"
license = "Apache-2.0"

[features]
default = ["ipc", "software"]

# Enables pre-build and init as view-process.
#
# If this is enabled all communication with the view is serialized/deserialized, 
# even in same-process mode.
#
# Feature enabled by default.
ipc = ["zero-ui-view-api/ipc"]

# Enables software renderer fallback.
#
# If enabled and a native OpenGL 3.2 driver is not available the `swgl` software renderer is used.
#
# The `clang-cl` dependency is required to build with this feature.
#
# To install `clang-cl` in Windows:
#
# * Install LLVM (https://releases.llvm.org/), it bundles clang-cl.
# * Add it to Windows PATH with something like `set PATH=%PATH%;C:\Program Files\LLVM\bin`.
# * Define these two env vars `set CC=clang-cl` and `set CXX=clang-cl`.
#
# Feature enabled by default.
software = ["swgl"]

# Enables AVIF decoding and encoding.
#
# The `NASM`, `pkg-config`, `dav1d` external dependency is required to build with this feature.
# 
# To install NASM in Windows:
#
# * Install NASM (https://www.nasm.us/pub/nasm/releasebuilds), just the minimal feature set is needed.
# * Add it to Windows PATH with something like `set PATH=%PATH%;C:\Program Files\NASM`.
#
# To install `pkg-config` in Windows:
#
# * Install `choco` (https://chocolatey.org/install).
# * Run `choco install pkgconfiglite`.
#
# To install `dav1d` in Windows:
#
# * Build/install `vcpkg` (https://vcpkg.io/en/getting-started.html).
# * Add `vcpkg` to Windows PATH with something like `set PATH=%PATH%;C:\your-path\vcpkg`.
# * Run `vcpkg install dav1d:x64-windows`.
# * Add `C:\your-path\vcpkg\installed\x64-windows\lib\pkgconfig` to the `PKG_CONFIG_PATH` env var.
#
# Note that the `dav1d.dll` is dynamically linked, Windows needs to find it when you run your app, the DLL is in
# `C:\your-path\vcpkg\installed\x64-windows\bin`, you can add this dir to PATH if you are getting a `STATUS_DLL_NOT_FOUND` runtime error.
#
# Feature not enabled by default.
# avif = ["image/avif", "image/avif-decoder"]

[lib]
crate-type = ["lib", "cdylib"]

[dependencies]
zero-ui-view-api = { path = "../zero-ui-view-api", default-features = false }
webrender = { path = "../dependencies/webrender/webrender" }
swgl = { path = "../dependencies/webrender/swgl", optional = true }
tracing = "0.1"
gleam = "0.13.1" # matches webrender
winit = { version = "0.28", default-features = false, features = ["x11", "wayland", "wayland-dlopen"] }
glutin = "0.30"
raw-window-handle = "0.5"
flume = "0.10"
is_main_thread = "0.1"
image = "0.24"
img-parts = "0.3"
byteorder = "1"
rustc-hash = "1"
rayon = "1"
backtrace = "0.3"

[target.'cfg(windows)'.dependencies.windows-sys]
version = "0.48.0"
features = [
    "Win32_UI_Shell", 
    "Win32_System_Com",
    "Win32_UI_WindowsAndMessaging", 
    "Win32_Devices_HumanInterfaceDevice",   
    "Win32_UI_Input_KeyboardAndMouse", 
    "Win32_Graphics_Gdi",
    "Win32_Graphics_OpenGL",
    "Win32_UI_Accessibility",
    "Win32_System_LibraryLoader",
    "Win32_Globalization",
    "Win32_System_SystemServices",
]
[target.'cfg(windows)'.dependencies.windows]
version = "0.48.0"
features = [
    "Foundation_Collections",
    "System_UserProfile"
]

[target.'cfg(not(windows))'.dependencies]
sys-locale = "0.3"

[target.'cfg(any(target_os = "linux", target_os = "dragonfly", target_os = "freebsd", target_os = "netbsd", target_os = "openbsd"))'.dependencies]
wayland-client = { version = "0.29.5", default_features = false } # matches winit
x11-dl = "2.18.5" # matches winit
tempfile = "3"

# xlib is re-exported by glutin/winit

# prebuild profile defined in the workspace toml