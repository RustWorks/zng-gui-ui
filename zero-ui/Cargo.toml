[package]
name = "zero-ui"
version = "0.1.0"
authors = ["Samuel Guerra <sam.rodr.g@gmail.com>", "Well <well-r@hotmail.com>"]
edition = "2021"
license = "Apache-2.0"
readme = "README.md"

[features]
default = ["ipc", "dyn_widget", "http", "debug_default"]

# Enables pre-build views and connecting to views running in another process.
# 
# Enabled by default.
ipc = ["zero-ui-core/ipc"]

# Enables http tasks.
#
# Enabled by default.
http = ["zero-ui-core/http"]

# Signal the `zero-ui-core` build script to enable the `dyn_*` and `inspector` features for debug builds.
#
# Enabled by default.
debug_default = ["zero-ui-core/debug_default"]

# Use dynamic dispatch at the node level by placing each property node in a `BoxedUiNode` and enabling `UiNode::cfg_boxed`.
#
# This speeds-up compilation time at the cost of runtime.
dyn_node = ["zero-ui-core/dyn_node"]

# Use dynamic dispatch at the widget level by enabling `Widget::cfg_boxed_wgt` and boxing the child node of widget's new function.
#
# This does not cost as much runtime as `dyn_node` and is the only way of getting sane build times
# in most desktop machines. Without this feature build time and memory grows exponentially or worst, a similar
# effect that can be observed in nested async code. Only enable this if you have build server that can handle it,
# the result is as optimized as it gets with some event handlers compiling down to an almost direct call.
dyn_widget = ["zero-ui-core/dyn_widget"]

# Instrument each property and widget instance with "Inspector" nodes.
inspector = ["zero-ui-core/inspector"]

# Use dynamic dispatch at the app-extension level.
#
# This speeds-up compilation time at the cost of runtime.
dyn_app_extension = ["zero-ui-core/dyn_app_extension"]

# Box closures at opportune places, such as `Var::map`, reducing the number of monomorphised types.
#
# This speeds-up compilation time at the cost of runtime.
dyn_closure = ["zero-ui-core/dyn_closure"]

# like cfg(test) but also visible in docs and integration tests.
#
# USAGE:
#
# Build with this feature to use the core test helper types that show
# in the documentation.
test_util = ["zero-ui-core/test_util"]

# # Other Features
#
# ## `doc_nightly`
#
# Activates nightly only `rustdoc` features. The crate is already configured to use this feature
# in "docs.rs" and `do doc`.
# 
# Use `#![cfg_attr(doc_nightly, feature(doc_foo))]` in the `lib.rs` to activate a `rustdoc` feature. Then
# use `#[cfg_attr(doc_nightly, doc(foo))]` in an item.
# 
# Use `RUSTDOCFLAGS="--cfg doc_nightly" cargo +nightly doc` to run `cargo doc` without using `do`.

[dependencies]
# local
zero-ui-core = { path = "../zero-ui-core", default-features = false }

# util
paste = "1"
tracing = "0.1"
bitflags = "1"
linear-map = "1"

[build-dependencies]
zero-ui-docs =  { path = "../zero-ui-docs" }

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-pc-windows-msvc", "x86_64-unknown-linux-gnu"]
rustdoc-args = ["--cfg", "doc_nightly", "--html-in-header", "target/doc/zero-ui-extensions.html"]